/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package diabetesprediction;

import static diabetesprediction.Prediction.cu;
import static diabetesprediction.Prediction.demo;
import java.io.File;
import java.io.FileInputStream;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileSystemView;
import org.jfree.ui.RefineryUtilities;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Collections;
import javax.swing.JFrame;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.plot.XYPlot;
import org.jfree.data.xy.XYDataset;
import org.jfree.data.xy.XYSeries;
import org.jfree.data.xy.XYSeriesCollection;

/**
 *
 * @author SEABIRDS-PC
 */
public class UploadDataset extends javax.swing.JFrame {

    /**
     * Creates new form UploadDataset
     */
    
    public static String testingDataset;
    public static int noDi=0,preDi=0,Di=0;
    
    public UploadDataset() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Algerian", 0, 36)); // NOI18N
        jLabel1.setText("DIABETES NEPHROPATHY PREDICTION SYSTEM");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(197, 197, 197)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(22, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addContainerGap())
        );

        jLabel2.setText("UPLOAD DATASET:");

        jButton1.setText("Browse");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton2.setText("Prediction");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Pie Chart");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Cluster");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setText("Cancel");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 483, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(113, 113, 113))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(29, 29, 29)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        try
        {
            JFileChooser jfc = new JFileChooser(FileSystemView.getFileSystemView().getHomeDirectory());
            jfc.setCurrentDirectory(new File(System.getProperty("user.dir")));
            int returnValue = jfc.showOpenDialog(null);            
            if (returnValue == JFileChooser.APPROVE_OPTION) 
            {
                File fe = jfc.getSelectedFile();
                
                jTextField1.setText(fe.getAbsolutePath());
                
                FileInputStream fis=new FileInputStream(fe);
                byte data[]=new byte[fis.available()];
                fis.read(data);
                fis.close();
                testingDataset=new String(data);
                
                jTextArea1.setText(testingDataset);
            }
            else
            {
                JOptionPane.showMessageDialog(this,"Open Dialogue Cancelled by User!");
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
            /* Load Diabetes Training Dataset */
        
        noDi=0;preDi=0;Di=0;
        
        try
        {
            File fe=new File("Pima Indian Diabetes Training Dataset.txt");		
            FileInputStream fis=new FileInputStream(fe);
            byte data[]=new byte[fis.available()];
            fis.read(data);
            fis.close();
            String trainingDataset=new String(data);
            
            String trD[]=trainingDataset.trim().split("\n");                        
            String teD[]=testingDataset.trim().split("\n");
            
            String noDiab="",preDiab="",Diab="";
            for(int i=1;i<teD.length;i++)
            {
                String testingRecord=teD[i].trim();
                String predictedClass=KarlPearsonCorrelation(testingRecord,trD);                
                String predictedRecord=testingRecord.replaceAll("\\?", predictedClass);
                if(predictedClass.equals("0"))
                {
                    noDiab=noDiab+predictedRecord+"\n";
                    noDi++;
                }
                else if(predictedClass.equals("1"))
                {
                    preDiab=preDiab+predictedRecord+"\n";
                    preDi++;
                }
                else if(predictedClass.equals("2"))
                {
                    Diab=Diab+predictedRecord+"\n";
                    Di++;
                }
            }
            
            Prediction mf=new Prediction();
            mf.setTitle("Prediction");
            mf.setVisible(true);
            mf.setResizable(false);
            if(!(noDiab.equals("")))
            {
                String noDiabData=teD[0]+"\n"+noDiab.substring(0,noDiab.lastIndexOf('\n'));
                mf.jTextArea3.setText(noDiabData);
            }
            if(!(preDiab.equals("")))
            {
                String preDiabData=teD[0]+"\n"+preDiab.substring(0,preDiab.lastIndexOf('\n'));
                mf.jTextArea1.setText(preDiabData);
            }
            if(!(Diab.equals("")))
            {
                String DiabData=teD[0]+"\n"+Diab.substring(0,Diab.lastIndexOf('\n'));
                mf.jTextArea2.setText(DiabData);
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        
        
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // TODO add your handling code here:
        
        jTextField1.setText("");
        jTextArea1.setText("");
        
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        if(cu==1)
        {
            demo.setVisible( false );
            cu=0;
        }
        
        cu=1;
        demo = new Prediction.PieChart_AWT("OUTPUT");  
        demo.setSize( 560 , 367 );    
        RefineryUtilities.centerFrameOnScreen( demo );    
        demo.setVisible( true );
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
                                       
        try
        {        
            SwingUtilities.invokeLater(() -> {
            ScatterPlotExample example = new ScatterPlotExample("NEPHROPATHY DETECTION");
            example.setSize(800, 400);
            example.setLocationRelativeTo(null);            
            example.setVisible(true);
          });
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }                                                    
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UploadDataset.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UploadDataset.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UploadDataset.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UploadDataset.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UploadDataset().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables

    public static String KarlPearsonCorrelation(String X, String[] Y) {        
        
        double minCorCoEffValue=0;
        String closestRecord="",predictedClass="";
        
        for(int i=1;i<Y.length;i++)
        {
            System.out.println("X: "+X);
            System.out.println("Y: "+Y[i]);
            
            String x[]=X.trim().split(",");
            String y[]=Y[i].trim().split(",");
            
            double Ax=Average(x);
            double Ay=Average(y);
            String dx=d(x,Ax);
            String dy=d(y,Ay);
            String dx2=d2(dx);
            String dy2=d2(dy);
            String dxdy=dmultiplyd(dx,dy);
            double N=x.length-1;
            double sumOfdxdy=sum(dxdy);
            double sumOfdx=sum(dx);
            double sumOfdy=sum(dy);
            double sumOfdx2=sum(dx2);
            double sumOfdy2=sum(dy2);
            double sumOfdxwhole2=sumOfdx * sumOfdx;
            double sumOfdywhole2=sumOfdy * sumOfdy;
            double R=(N*sumOfdxdy-sumOfdx*sumOfdy)/(Math.sqrt(N*sumOfdx2-sumOfdxwhole2))*(Math.sqrt(N*sumOfdy2-sumOfdywhole2));
            
            System.out.println("Ax: "+Ax);
            System.out.println("Ay: "+Ay);
            System.out.println("dx: "+dx);
            System.out.println("dy: "+dy);
            System.out.println("dx2: "+dx2);
            System.out.println("dy2: "+dy2);
            System.out.println("dxdy: "+dxdy);
            System.out.println("N: "+N);
            System.out.println("sumOfdxdy: "+sumOfdxdy);
            System.out.println("sumOfdx: "+sumOfdx);
            System.out.println("sumOfdy: "+sumOfdy);
            System.out.println("sumOfdx2: "+sumOfdx2);
            System.out.println("sumOfdy2: "+sumOfdy2);
            System.out.println("sumOfdxwhole2: "+sumOfdxwhole2);
            System.out.println("sumOfdywhole2: "+sumOfdywhole2);
            System.out.println("R: "+R);
            System.out.println();
            
            if(i==1)
            {
                minCorCoEffValue=R;
                closestRecord=Y[i].trim();
                predictedClass=y[y.length-1].trim();
            }
            
            if(R<minCorCoEffValue)
            {
                minCorCoEffValue=R;
                closestRecord=Y[i].trim();
                predictedClass=y[y.length-1].trim();
            }
        }
        
        System.out.println("==============================================");
        System.out.println("X: "+X);
        System.out.println("minCorCoEffValue: "+minCorCoEffValue);
        System.out.println("closestRecord: "+closestRecord);
        System.out.println("predictedClass: "+predictedClass);
        System.out.println("==============================================");
        return predictedClass;
    }

    public static double Average(String[] x) {
        double total=0;
        for(int i=0;i<x.length-1;i++)
        {
            total=total+Double.parseDouble(x[i].trim());
        }
        double average=total/(double)(x.length-1);
        return average;
    }

    public static String d(String[] x, double Ax) {
        String fordx="";
        for(int i=0;i<x.length-1;i++)
        {
            fordx=fordx+(Double.parseDouble(x[i].trim())-Ax)+","; // dx = X-Ax
        }
        String dx=fordx.substring(0,fordx.lastIndexOf(','));
        return dx;
    }

    public static String d2(String dx) {
        String fdx[]=dx.split(",");        
        String fordx2="";
        for(int i=0;i<fdx.length;i++)
        {
            fordx2=fordx2+(Double.parseDouble(fdx[i].trim())*Double.parseDouble(fdx[i].trim()))+","; // dx2 = dx * dx
        }
        String dx2=fordx2.substring(0,fordx2.lastIndexOf(','));
        return dx2;
    }

    public static String dmultiplyd(String dx, String dy) {
        String fdx[]=dx.split(",");
        String fdy[]=dy.split(",");
        String fordxdy="";
        for(int i=0;i<fdx.length;i++)
        {
            fordxdy=fordxdy+(Double.parseDouble(fdx[i].trim())*Double.parseDouble(fdy[i].trim()))+","; // dxdy = dx * dy
        }
        String dxdy=fordxdy.substring(0,fordxdy.lastIndexOf(','));
        return dxdy;
    }

    public static double sum(String dxdy) {
        String fdxdy[]=dxdy.split(",");
        double total=0;
        for(int i=0;i<fdxdy.length;i++)
        {
            total=total+Double.parseDouble(fdxdy[i].trim());
        }        
        return total;
    }

    public class ScatterPlotExample extends JFrame {
    private static final long serialVersionUID = 6294689542092367723L;

    public ScatterPlotExample(String title) {
      super(title);

      // Create dataset
      XYDataset dataset = createDataset();

      // Create chart
      JFreeChart chart = ChartFactory.createScatterPlot(
          "NEPHROPATHY", 
          "Glucose Level", "GFR", dataset,PlotOrientation.VERTICAL,true,true,false);


      //Changes background color
      XYPlot plot = (XYPlot)chart.getPlot();
      plot.setBackgroundPaint(new Color(255,228,196));


      // Create Panel
      ChartPanel panel = new ChartPanel(chart);
      setContentPane(panel);
    }

    private XYDataset createDataset() {
      XYSeriesCollection dataset = new XYSeriesCollection();
      
      ArrayList totalOnly=new ArrayList();
        ArrayList totalWithGluBp=new ArrayList();
        
        String teD[]=testingDataset.trim().split("\n");
        for(int i=1;i<teD.length;i++)
        {
            String testingRecord=teD[i].trim();
            String x[]=testingRecord.trim().split(",");
            
            int glucose=Integer.parseInt(x[1].trim());
            int bp=Integer.parseInt(x[2].trim());
            int total=glucose+bp;
            totalOnly.add(total);
            totalWithGluBp.add(total+","+glucose+","+bp);
        }
        Collections.sort(totalOnly);
            
        ArrayList norep=new ArrayList();
        for(int j=0;j<totalOnly.size();j++)
        {
            String tot=totalOnly.get(j).toString().trim();
            
            for(int i=1;i<totalWithGluBp.size();i++)
            {
                String totWGBP=totalWithGluBp.get(i).toString().trim();
                String twbp[]=totWGBP.trim().split(",");
                if(tot.trim().equals(twbp[0].trim()))
                {
                    String glucWithBP=twbp[1]+","+twbp[2];
                    if(!(norep.contains(glucWithBP)))
                    {
                        norep.add(glucWithBP);
                        break;
                    }
                }
            }
        }
        
        int noOfClusters=4;
        int start=0;
        int N=norep.size()/noOfClusters;
        ArrayList clusters[]=new ArrayList[noOfClusters];
        for(int i=0;i<clusters.length;i++)
        {
            clusters[i]=new ArrayList();
            
            for(int j=start;j<N;j++)
            {
                String rec=norep.get(j).toString().trim();
                clusters[i].add(rec);                
            }
            start=N;
            N=N+N;
            if(N>norep.size())
            {
                N=norep.size();
            }
        }
        start=4*N;
        for(int j=start;j<norep.size();j++)
        {
            String rec=norep.get(j).toString().trim();
            clusters[clusters.length-1].add(rec);
        }
        //ArrayList centeroid=new ArrayList();
        String seriesnames[]={"miser","general","target","spendthrift","careful","centeroid"};
        XYSeries series2 = new XYSeries("centeroid");
        for(int i=0;i<clusters.length;i++)
        {
            XYSeries series1 = new XYSeries(seriesnames[i]);            
            for(int j=0;j<clusters[i].size();j++)
            {
                if(j==clusters[i].size()/2)
                {
                    String value=clusters[i].get(clusters[i].size()/2).toString().trim();
                    String sp[]=value.trim().split(",");
                    series2.add(Double.parseDouble(sp[0]), Double.parseDouble(sp[1]));
                }
                else
                {
                    String value=clusters[i].get(j).toString().trim();
                    String sp[]=value.trim().split(",");
                    series1.add(Double.parseDouble(sp[0]), Double.parseDouble(sp[1]));
                }
            }            
            dataset.addSeries(series1);
        }
        dataset.addSeries(series2);
        return dataset;
    }
  }
}
